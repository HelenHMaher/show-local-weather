{"version":3,"sources":["global.js","theme.js","Components/location.js","Components/weather.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyles","createGlobalStyle","theme","mobile","yellow","green","blue","Location","props","lat","lon","className","Weather","weather","App","useState","latitude","setLatitude","longitude","setLongitude","weatherTheme","setWeatherTheme","weatherDescript","setWeatherDescript","setWeather","useEffect","navigator","geolocation","getCurrentPosition","position","coords","console","log","alert","axios","method","url","params","then","response","data","main","temp","description","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"qkBAEO,IAAMA,EAAeC,YAAH,KCFZC,EAAQ,CACnBC,OAAQ,QACRC,OAAQ,UACRC,MAAO,UACPC,KAAM,WCWOC,EAZS,SAACC,GAAW,IAC1BC,EAAaD,EAAbC,IAAKC,EAAQF,EAARE,IACb,OACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,aAAf,aACaF,EADb,eAC8BC,GAE9B,yBAAKC,UAAU,QAAf,WCDSC,EANQ,SAACJ,GAAW,IACzBK,EAAYL,EAAZK,QAER,OAAO,yBAAKF,UAAU,WAAf,WAAkCE,I,gBCgF5BC,MA9Ef,WAAgB,IAAD,EACmBC,mBAAS,MAD5B,mBACNC,EADM,KACIC,EADJ,OAEqBF,mBAAS,MAF9B,mBAENG,EAFM,KAEKC,EAFL,OAG2BJ,mBAAS,MAHpC,mBAGNK,EAHM,KAGQC,EAHR,OAIiCN,mBAAS,MAJ1C,mBAINO,EAJM,KAIWC,EAJX,OAKiBR,mBAAS,MAL1B,mBAKNF,EALM,KAKGW,EALH,KA2Db,OANAC,qBAAU,WA7CJC,UAAUC,YACZD,UAAUC,YAAYC,oBAAmB,SAACC,GACxCZ,EAAYY,EAASC,OAAOd,UAC5BG,EAAaU,EAASC,OAAOZ,WAC7Ba,QAAQC,IAAI,6BAGdC,MAAM,2DAmBRC,IAAM,CACJC,OAAQ,MACRC,IAAK,gDACLC,OAAQ,CACN5B,IAAKO,EACLN,IAAKQ,KAGNoB,MAAK,SAACC,GACLR,QAAQC,IAAIO,GACZf,EAAWe,EAASC,KAAKC,KAAKC,MAC9BrB,EAAgBkB,EAASC,KAAK3B,QAAQ,GAAG4B,MACzClB,EAAmBgB,EAASC,KAAK3B,QAAQ,GAAG8B,gBAE7CC,OAAM,SAACC,GACNd,QAAQC,IAAIa,MA5BhBX,IAAM,CACJC,OAAQ,MACRC,IAAI,4DAAD,OAA8DpB,EAA9D,YAA0EE,EAA1E,gBAHgB,6CAKlBoB,MAAK,SAACC,GACLR,QAAQC,IAAIO,MAEbK,OAAM,SAACC,GACNd,QAAQC,IAAIa,SA+BhB,kBAAC,IAAD,CAAe3C,MAAOA,GACpB,oCACE,kBAACF,EAAD,MACA,yBAAKW,UAAU,OACb,4BAAQA,UAAU,cAChB,oDAEF,kBAAC,EAAD,CAAUF,IAAKO,EAAUN,IAAKQ,IAC9B,kBAAC,EAAD,CAASL,QAASA,IALpB,kBAMkBO,EANlB,wBAOwBE,EACtB,4BAAQX,UAAU,cAAlB,mBCnEUmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmB7B,WACrBA,UAAU8B,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdf,OAAM,SAAAC,GACLd,QAAQc,MAAMA,EAAMe,c","file":"static/js/main.0a9a987f.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n\nhtml {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n`;\n","export const theme = {\n  mobile: \"576px\",\n  yellow: \"#fdf003\",\n  green: \"#00a45d\",\n  blue: \"#0266b1\",\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const Location = (props) => {\n  const { lat, lon } = props;\n  return (\n    <div className=\"location\">\n      <div className=\"latAndLon\">\n        Latitude: {lat} Longitude: {lon}\n      </div>\n      <div className=\"city\">City:</div>\n    </div>\n  );\n};\n\nexport default Location;\n\nLocation.propTypes = {\n  lat: PropTypes.number,\n  lon: PropTypes.number,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const Weather = (props) => {\n  const { weather } = props;\n\n  return <div className=\"weather\">Weather:{weather}</div>;\n};\n\nexport default Weather;\n\nWeather.propTypes = {\n  weather: PropTypes.number,\n};\n","import React, { useState, useEffect } from \"react\";\nimport { GlobalStyles } from \"./global\";\nimport { ThemeProvider } from \"styled-components\";\nimport { theme } from \"./theme\";\nimport Location from \"./Components/location\";\nimport Weather from \"./Components/weather\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const [weatherTheme, setWeatherTheme] = useState(null);\n  const [weatherDescript, setWeatherDescript] = useState(null);\n  const [weather, setWeather] = useState(null);\n\n  function showPosition() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        setLatitude(position.coords.latitude);\n        setLongitude(position.coords.longitude);\n        console.log(\"location data received\");\n      });\n    } else {\n      alert(\"Sorry, your browser does not support HTML5 geolocation.\");\n    }\n  }\n\n  function showCity() {\n    const YOUR_API_KEY = \"AIzaSyC6o7jtXnfB7iX0EcRf7w725Ff5KFWhYe0\";\n    axios({\n      method: \"get\",\n      url: `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${YOUR_API_KEY}`,\n    })\n      .then((response) => {\n        console.log(response);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  function showWeather() {\n    axios({\n      method: \"get\",\n      url: \"https://fcc-weather-api.glitch.me/api/current\",\n      params: {\n        lat: latitude,\n        lon: longitude,\n      },\n    })\n      .then((response) => {\n        console.log(response);\n        setWeather(response.data.main.temp);\n        setWeatherTheme(response.data.weather[0].main);\n        setWeatherDescript(response.data.weather[0].description);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  useEffect(() => {\n    showPosition();\n    showWeather();\n    showCity();\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <>\n        <GlobalStyles />\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <p>Local Weather Report</p>\n          </header>\n          <Location lat={latitude} lon={longitude} />\n          <Weather weather={weather} />\n          Weather Theme: {weatherTheme}\n          Weather Description: {weatherDescript}\n          <footer className=\"App-footer\">Helen Maher</footer>\n        </div>\n      </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}